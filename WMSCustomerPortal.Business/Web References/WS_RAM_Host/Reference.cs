//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WMSCustomerPortal.Business.WS_RAM_Host {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HostWSSoap", Namespace="http://services.ramgroup.co.za/")]
    public partial class HostWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback ARRAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CLCAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback SAAAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback ORDAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback OCOAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback OSTAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback SLAAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback IGDAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelAddLabelRequestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public HostWS() {
            this.Url = global::WMSCustomerPortal.Business.Properties.Settings.Default.WMSCustomerPortal_Business_WS_RAM_Host_HostWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event ARRAddCompletedEventHandler ARRAddCompleted;
        
        /// <remarks/>
        public event CLCAddCompletedEventHandler CLCAddCompleted;
        
        /// <remarks/>
        public event SAAAddCompletedEventHandler SAAAddCompleted;
        
        /// <remarks/>
        public event ORDAddCompletedEventHandler ORDAddCompleted;
        
        /// <remarks/>
        public event OCOAddCompletedEventHandler OCOAddCompleted;
        
        /// <remarks/>
        public event OSTAddCompletedEventHandler OSTAddCompleted;
        
        /// <remarks/>
        public event SLAAddCompletedEventHandler SLAAddCompleted;
        
        /// <remarks/>
        public event IGDAddCompletedEventHandler IGDAddCompleted;
        
        /// <remarks/>
        public event ParcelAddCompletedEventHandler ParcelAddCompleted;
        
        /// <remarks/>
        public event ParcelLabelCompletedEventHandler ParcelLabelCompleted;
        
        /// <remarks/>
        public event ParcelAddLabelRequestCompletedEventHandler ParcelAddLabelRequestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/HelloWorld", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld(string name) {
            object[] results = this.Invoke("HelloWorld", new object[] {
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync(string name) {
            this.HelloWorldAsync(name, null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(string name, object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[] {
                        name}, this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/ARRAdd", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result ARRAdd(string SiteCode, string PrincipalCode, bool Resend, string ProdCode, string LineNumber, string ReceiptType, string MoveRef, string PORef, System.DateTime ReceiptDT, string StartEndStatus, int RejectCount, string ReasonCode, int AcceptCount, string[] SerialNumbers) {
            object[] results = this.Invoke("ARRAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        Resend,
                        ProdCode,
                        LineNumber,
                        ReceiptType,
                        MoveRef,
                        PORef,
                        ReceiptDT,
                        StartEndStatus,
                        RejectCount,
                        ReasonCode,
                        AcceptCount,
                        SerialNumbers});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void ARRAddAsync(string SiteCode, string PrincipalCode, bool Resend, string ProdCode, string LineNumber, string ReceiptType, string MoveRef, string PORef, System.DateTime ReceiptDT, string StartEndStatus, int RejectCount, string ReasonCode, int AcceptCount, string[] SerialNumbers) {
            this.ARRAddAsync(SiteCode, PrincipalCode, Resend, ProdCode, LineNumber, ReceiptType, MoveRef, PORef, ReceiptDT, StartEndStatus, RejectCount, ReasonCode, AcceptCount, SerialNumbers, null);
        }
        
        /// <remarks/>
        public void ARRAddAsync(string SiteCode, string PrincipalCode, bool Resend, string ProdCode, string LineNumber, string ReceiptType, string MoveRef, string PORef, System.DateTime ReceiptDT, string StartEndStatus, int RejectCount, string ReasonCode, int AcceptCount, string[] SerialNumbers, object userState) {
            if ((this.ARRAddOperationCompleted == null)) {
                this.ARRAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnARRAddOperationCompleted);
            }
            this.InvokeAsync("ARRAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        Resend,
                        ProdCode,
                        LineNumber,
                        ReceiptType,
                        MoveRef,
                        PORef,
                        ReceiptDT,
                        StartEndStatus,
                        RejectCount,
                        ReasonCode,
                        AcceptCount,
                        SerialNumbers}, this.ARRAddOperationCompleted, userState);
        }
        
        private void OnARRAddOperationCompleted(object arg) {
            if ((this.ARRAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ARRAddCompleted(this, new ARRAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/CLCAdd", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result CLCAdd(string recordSource, string siteCode, string principalCode, string moveRef, string orderLineNumber, string prodCode, int quantity, string receiptType, int discrepancy, int serialCount, string[] SerialNumbers) {
            object[] results = this.Invoke("CLCAdd", new object[] {
                        recordSource,
                        siteCode,
                        principalCode,
                        moveRef,
                        orderLineNumber,
                        prodCode,
                        quantity,
                        receiptType,
                        discrepancy,
                        serialCount,
                        SerialNumbers});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void CLCAddAsync(string recordSource, string siteCode, string principalCode, string moveRef, string orderLineNumber, string prodCode, int quantity, string receiptType, int discrepancy, int serialCount, string[] SerialNumbers) {
            this.CLCAddAsync(recordSource, siteCode, principalCode, moveRef, orderLineNumber, prodCode, quantity, receiptType, discrepancy, serialCount, SerialNumbers, null);
        }
        
        /// <remarks/>
        public void CLCAddAsync(string recordSource, string siteCode, string principalCode, string moveRef, string orderLineNumber, string prodCode, int quantity, string receiptType, int discrepancy, int serialCount, string[] SerialNumbers, object userState) {
            if ((this.CLCAddOperationCompleted == null)) {
                this.CLCAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCLCAddOperationCompleted);
            }
            this.InvokeAsync("CLCAdd", new object[] {
                        recordSource,
                        siteCode,
                        principalCode,
                        moveRef,
                        orderLineNumber,
                        prodCode,
                        quantity,
                        receiptType,
                        discrepancy,
                        serialCount,
                        SerialNumbers}, this.CLCAddOperationCompleted, userState);
        }
        
        private void OnCLCAddOperationCompleted(object arg) {
            if ((this.CLCAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CLCAddCompleted(this, new CLCAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/SAAAdd", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SAAAdd(string SiteCode, string PrincipalCode, string ProdCode, string QuantityChange) {
            object[] results = this.Invoke("SAAAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        ProdCode,
                        QuantityChange});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SAAAddAsync(string SiteCode, string PrincipalCode, string ProdCode, string QuantityChange) {
            this.SAAAddAsync(SiteCode, PrincipalCode, ProdCode, QuantityChange, null);
        }
        
        /// <remarks/>
        public void SAAAddAsync(string SiteCode, string PrincipalCode, string ProdCode, string QuantityChange, object userState) {
            if ((this.SAAAddOperationCompleted == null)) {
                this.SAAAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSAAAddOperationCompleted);
            }
            this.InvokeAsync("SAAAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        ProdCode,
                        QuantityChange}, this.SAAAddOperationCompleted, userState);
        }
        
        private void OnSAAAddOperationCompleted(object arg) {
            if ((this.SAAAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SAAAddCompleted(this, new SAAAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/ORDAdd", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result ORDAdd(
                    string recordSource, 
                    string siteCode, 
                    string principalCode, 
                    string orderNumber, 
                    int lineCount, 
                    System.DateTime dateCreated, 
                    string companyName, 
                    string headerComment, 
                    string custOrderNumber, 
                    string custAcc, 
                    string invName, 
                    string invAdd1, 
                    string invAdd2, 
                    string invAdd3, 
                    string invAdd4, 
                    string invAdd5, 
                    string invAdd6, 
                    bool gsmTest, 
                    string vatNumber, 
                    bool printPrice, 
                    string priority, 
                    bool vap, 
                    string salesPerson, 
                    string salesCategory, 
                    string processor, 
                    string deliveryAdd1, 
                    string deliveryAdd2, 
                    string deliveryAdd3, 
                    string deliveryAdd4, 
                    string deliveryAdd5, 
                    string deliveryAdd6, 
                    string wmsPostCode, 
                    double orderDiscount, 
                    double orderVAT, 
                    int docToPrint, 
                    ORDLine[] ordLines, 
                    string IDNumber, 
                    string KYC, 
                    string CourierName, 
                    string CourierService, 
                    bool InsuranceRequired, 
                    bool ValidateDelivery, 
                    string StoreCode) {
            object[] results = this.Invoke("ORDAdd", new object[] {
                        recordSource,
                        siteCode,
                        principalCode,
                        orderNumber,
                        lineCount,
                        dateCreated,
                        companyName,
                        headerComment,
                        custOrderNumber,
                        custAcc,
                        invName,
                        invAdd1,
                        invAdd2,
                        invAdd3,
                        invAdd4,
                        invAdd5,
                        invAdd6,
                        gsmTest,
                        vatNumber,
                        printPrice,
                        priority,
                        vap,
                        salesPerson,
                        salesCategory,
                        processor,
                        deliveryAdd1,
                        deliveryAdd2,
                        deliveryAdd3,
                        deliveryAdd4,
                        deliveryAdd5,
                        deliveryAdd6,
                        wmsPostCode,
                        orderDiscount,
                        orderVAT,
                        docToPrint,
                        ordLines,
                        IDNumber,
                        KYC,
                        CourierName,
                        CourierService,
                        InsuranceRequired,
                        ValidateDelivery,
                        StoreCode});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void ORDAddAsync(
                    string recordSource, 
                    string siteCode, 
                    string principalCode, 
                    string orderNumber, 
                    int lineCount, 
                    System.DateTime dateCreated, 
                    string companyName, 
                    string headerComment, 
                    string custOrderNumber, 
                    string custAcc, 
                    string invName, 
                    string invAdd1, 
                    string invAdd2, 
                    string invAdd3, 
                    string invAdd4, 
                    string invAdd5, 
                    string invAdd6, 
                    bool gsmTest, 
                    string vatNumber, 
                    bool printPrice, 
                    string priority, 
                    bool vap, 
                    string salesPerson, 
                    string salesCategory, 
                    string processor, 
                    string deliveryAdd1, 
                    string deliveryAdd2, 
                    string deliveryAdd3, 
                    string deliveryAdd4, 
                    string deliveryAdd5, 
                    string deliveryAdd6, 
                    string wmsPostCode, 
                    double orderDiscount, 
                    double orderVAT, 
                    int docToPrint, 
                    ORDLine[] ordLines, 
                    string IDNumber, 
                    string KYC, 
                    string CourierName, 
                    string CourierService, 
                    bool InsuranceRequired, 
                    bool ValidateDelivery, 
                    string StoreCode) {
            this.ORDAddAsync(recordSource, siteCode, principalCode, orderNumber, lineCount, dateCreated, companyName, headerComment, custOrderNumber, custAcc, invName, invAdd1, invAdd2, invAdd3, invAdd4, invAdd5, invAdd6, gsmTest, vatNumber, printPrice, priority, vap, salesPerson, salesCategory, processor, deliveryAdd1, deliveryAdd2, deliveryAdd3, deliveryAdd4, deliveryAdd5, deliveryAdd6, wmsPostCode, orderDiscount, orderVAT, docToPrint, ordLines, IDNumber, KYC, CourierName, CourierService, InsuranceRequired, ValidateDelivery, StoreCode, null);
        }
        
        /// <remarks/>
        public void ORDAddAsync(
                    string recordSource, 
                    string siteCode, 
                    string principalCode, 
                    string orderNumber, 
                    int lineCount, 
                    System.DateTime dateCreated, 
                    string companyName, 
                    string headerComment, 
                    string custOrderNumber, 
                    string custAcc, 
                    string invName, 
                    string invAdd1, 
                    string invAdd2, 
                    string invAdd3, 
                    string invAdd4, 
                    string invAdd5, 
                    string invAdd6, 
                    bool gsmTest, 
                    string vatNumber, 
                    bool printPrice, 
                    string priority, 
                    bool vap, 
                    string salesPerson, 
                    string salesCategory, 
                    string processor, 
                    string deliveryAdd1, 
                    string deliveryAdd2, 
                    string deliveryAdd3, 
                    string deliveryAdd4, 
                    string deliveryAdd5, 
                    string deliveryAdd6, 
                    string wmsPostCode, 
                    double orderDiscount, 
                    double orderVAT, 
                    int docToPrint, 
                    ORDLine[] ordLines, 
                    string IDNumber, 
                    string KYC, 
                    string CourierName, 
                    string CourierService, 
                    bool InsuranceRequired, 
                    bool ValidateDelivery, 
                    string StoreCode, 
                    object userState) {
            if ((this.ORDAddOperationCompleted == null)) {
                this.ORDAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnORDAddOperationCompleted);
            }
            this.InvokeAsync("ORDAdd", new object[] {
                        recordSource,
                        siteCode,
                        principalCode,
                        orderNumber,
                        lineCount,
                        dateCreated,
                        companyName,
                        headerComment,
                        custOrderNumber,
                        custAcc,
                        invName,
                        invAdd1,
                        invAdd2,
                        invAdd3,
                        invAdd4,
                        invAdd5,
                        invAdd6,
                        gsmTest,
                        vatNumber,
                        printPrice,
                        priority,
                        vap,
                        salesPerson,
                        salesCategory,
                        processor,
                        deliveryAdd1,
                        deliveryAdd2,
                        deliveryAdd3,
                        deliveryAdd4,
                        deliveryAdd5,
                        deliveryAdd6,
                        wmsPostCode,
                        orderDiscount,
                        orderVAT,
                        docToPrint,
                        ordLines,
                        IDNumber,
                        KYC,
                        CourierName,
                        CourierService,
                        InsuranceRequired,
                        ValidateDelivery,
                        StoreCode}, this.ORDAddOperationCompleted, userState);
        }
        
        private void OnORDAddOperationCompleted(object arg) {
            if ((this.ORDAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ORDAddCompleted(this, new ORDAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/OCOAdd", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result OCOAdd(string SiteCode, string PrincipalCode, string OrderNumber, string Priority, string UserID, double Weight, double OrderCost, double OrderDiscount, double OrderVAT, OCOLine[] Lines) {
            object[] results = this.Invoke("OCOAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        OrderNumber,
                        Priority,
                        UserID,
                        Weight,
                        OrderCost,
                        OrderDiscount,
                        OrderVAT,
                        Lines});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void OCOAddAsync(string SiteCode, string PrincipalCode, string OrderNumber, string Priority, string UserID, double Weight, double OrderCost, double OrderDiscount, double OrderVAT, OCOLine[] Lines) {
            this.OCOAddAsync(SiteCode, PrincipalCode, OrderNumber, Priority, UserID, Weight, OrderCost, OrderDiscount, OrderVAT, Lines, null);
        }
        
        /// <remarks/>
        public void OCOAddAsync(string SiteCode, string PrincipalCode, string OrderNumber, string Priority, string UserID, double Weight, double OrderCost, double OrderDiscount, double OrderVAT, OCOLine[] Lines, object userState) {
            if ((this.OCOAddOperationCompleted == null)) {
                this.OCOAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOCOAddOperationCompleted);
            }
            this.InvokeAsync("OCOAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        OrderNumber,
                        Priority,
                        UserID,
                        Weight,
                        OrderCost,
                        OrderDiscount,
                        OrderVAT,
                        Lines}, this.OCOAddOperationCompleted, userState);
        }
        
        private void OnOCOAddOperationCompleted(object arg) {
            if ((this.OCOAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OCOAddCompleted(this, new OCOAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/OSTAdd", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result OSTAdd(string SiteCode, string PrincipalCode, string OrderNumber) {
            object[] results = this.Invoke("OSTAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        OrderNumber});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void OSTAddAsync(string SiteCode, string PrincipalCode, string OrderNumber) {
            this.OSTAddAsync(SiteCode, PrincipalCode, OrderNumber, null);
        }
        
        /// <remarks/>
        public void OSTAddAsync(string SiteCode, string PrincipalCode, string OrderNumber, object userState) {
            if ((this.OSTAddOperationCompleted == null)) {
                this.OSTAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOSTAddOperationCompleted);
            }
            this.InvokeAsync("OSTAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        OrderNumber}, this.OSTAddOperationCompleted, userState);
        }
        
        private void OnOSTAddOperationCompleted(object arg) {
            if ((this.OSTAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OSTAddCompleted(this, new OSTAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/SLAAdd", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SLAAdd(string SiteCode, string PrincipalCode, string ProdCode, int QuantityChange, string ReasonCode, string AvailabilityState, int SerialCount, string[] SerialNumbers) {
            object[] results = this.Invoke("SLAAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        ProdCode,
                        QuantityChange,
                        ReasonCode,
                        AvailabilityState,
                        SerialCount,
                        SerialNumbers});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SLAAddAsync(string SiteCode, string PrincipalCode, string ProdCode, int QuantityChange, string ReasonCode, string AvailabilityState, int SerialCount, string[] SerialNumbers) {
            this.SLAAddAsync(SiteCode, PrincipalCode, ProdCode, QuantityChange, ReasonCode, AvailabilityState, SerialCount, SerialNumbers, null);
        }
        
        /// <remarks/>
        public void SLAAddAsync(string SiteCode, string PrincipalCode, string ProdCode, int QuantityChange, string ReasonCode, string AvailabilityState, int SerialCount, string[] SerialNumbers, object userState) {
            if ((this.SLAAddOperationCompleted == null)) {
                this.SLAAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSLAAddOperationCompleted);
            }
            this.InvokeAsync("SLAAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        ProdCode,
                        QuantityChange,
                        ReasonCode,
                        AvailabilityState,
                        SerialCount,
                        SerialNumbers}, this.SLAAddOperationCompleted, userState);
        }

        private void OnSLAAddOperationCompleted(object arg) {
            if ((this.SLAAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SLAAddCompleted(this, new SLAAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/IGDAdd", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int IGDAdd(
                    string recordSource, 
                    string siteCode, 
                    string principalCode, 
                    string productCode, 
                    string EANCode, 
                    string ShortDesc, 
                    string LongDesc, 
                    bool serialised, 
                    string AnalysisA, 
                    string AnalysisB, 
                    string orderLineNo, 
                    int quantity, 
                    string receiptType, 
                    string moveRef, 
                    string poRef, 
                    System.DateTime poDate, 
                    System.DateTime stockDateTime) {
            object[] results = this.Invoke("IGDAdd", new object[] {
                        recordSource,
                        siteCode,
                        principalCode,
                        productCode,
                        EANCode,
                        ShortDesc,
                        LongDesc,
                        serialised,
                        AnalysisA,
                        AnalysisB,
                        orderLineNo,
                        quantity,
                        receiptType,
                        moveRef,
                        poRef,
                        poDate,
                        stockDateTime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void IGDAddAsync(
                    string recordSource, 
                    string siteCode, 
                    string principalCode, 
                    string productCode, 
                    string EANCode, 
                    string ShortDesc, 
                    string LongDesc, 
                    bool serialised, 
                    string AnalysisA, 
                    string AnalysisB, 
                    string orderLineNo, 
                    int quantity, 
                    string receiptType, 
                    string moveRef, 
                    string poRef, 
                    System.DateTime poDate, 
                    System.DateTime stockDateTime) {
            this.IGDAddAsync(recordSource, siteCode, principalCode, productCode, EANCode, ShortDesc, LongDesc, serialised, AnalysisA, AnalysisB, orderLineNo, quantity, receiptType, moveRef, poRef, poDate, stockDateTime, null);
        }
        
        /// <remarks/>
        public void IGDAddAsync(
                    string recordSource, 
                    string siteCode, 
                    string principalCode, 
                    string productCode, 
                    string EANCode, 
                    string ShortDesc, 
                    string LongDesc, 
                    bool serialised, 
                    string AnalysisA, 
                    string AnalysisB, 
                    string orderLineNo, 
                    int quantity, 
                    string receiptType, 
                    string moveRef, 
                    string poRef, 
                    System.DateTime poDate, 
                    System.DateTime stockDateTime, 
                    object userState) {
            if ((this.IGDAddOperationCompleted == null)) {
                this.IGDAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIGDAddOperationCompleted);
            }
            this.InvokeAsync("IGDAdd", new object[] {
                        recordSource,
                        siteCode,
                        principalCode,
                        productCode,
                        EANCode,
                        ShortDesc,
                        LongDesc,
                        serialised,
                        AnalysisA,
                        AnalysisB,
                        orderLineNo,
                        quantity,
                        receiptType,
                        moveRef,
                        poRef,
                        poDate,
                        stockDateTime}, this.IGDAddOperationCompleted, userState);
        }
        
        private void OnIGDAddOperationCompleted(object arg) {
            if ((this.IGDAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IGDAddCompleted(this, new IGDAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/ParcelAdd", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result ParcelAdd(string SiteCode, string PrincipalCode, string OrderNumber, int ParcelNo, double Kilograms, double Length, double Breadth, double Height, double InsuredValue, string SPNumber, string ParcelReference, int NoOfParcels) {
            object[] results = this.Invoke("ParcelAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        OrderNumber,
                        ParcelNo,
                        Kilograms,
                        Length,
                        Breadth,
                        Height,
                        InsuredValue,
                        SPNumber,
                        ParcelReference,
                        NoOfParcels});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelAddAsync(string SiteCode, string PrincipalCode, string OrderNumber, int ParcelNo, double Kilograms, double Length, double Breadth, double Height, double InsuredValue, string SPNumber, string ParcelReference, int NoOfParcels) {
            this.ParcelAddAsync(SiteCode, PrincipalCode, OrderNumber, ParcelNo, Kilograms, Length, Breadth, Height, InsuredValue, SPNumber, ParcelReference, NoOfParcels, null);
        }
        
        /// <remarks/>
        public void ParcelAddAsync(string SiteCode, string PrincipalCode, string OrderNumber, int ParcelNo, double Kilograms, double Length, double Breadth, double Height, double InsuredValue, string SPNumber, string ParcelReference, int NoOfParcels, object userState) {
            if ((this.ParcelAddOperationCompleted == null)) {
                this.ParcelAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelAddOperationCompleted);
            }
            this.InvokeAsync("ParcelAdd", new object[] {
                        SiteCode,
                        PrincipalCode,
                        OrderNumber,
                        ParcelNo,
                        Kilograms,
                        Length,
                        Breadth,
                        Height,
                        InsuredValue,
                        SPNumber,
                        ParcelReference,
                        NoOfParcels}, this.ParcelAddOperationCompleted, userState);
        }
        
        private void OnParcelAddOperationCompleted(object arg) {
            if ((this.ParcelAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelAddCompleted(this, new ParcelAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/ParcelLabel", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ParcelLabel(string cartonID) {
            object[] results = this.Invoke("ParcelLabel", new object[] {
                        cartonID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelLabelAsync(string cartonID) {
            this.ParcelLabelAsync(cartonID, null);
        }
        
        /// <remarks/>
        public void ParcelLabelAsync(string cartonID, object userState) {
            if ((this.ParcelLabelOperationCompleted == null)) {
                this.ParcelLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelLabelOperationCompleted);
            }
            this.InvokeAsync("ParcelLabel", new object[] {
                        cartonID}, this.ParcelLabelOperationCompleted, userState);
        }
        
        private void OnParcelLabelOperationCompleted(object arg) {
            if ((this.ParcelLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelLabelCompleted(this, new ParcelLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.ramgroup.co.za/ParcelAddLabelRequest", RequestNamespace="http://services.ramgroup.co.za/", ResponseNamespace="http://services.ramgroup.co.za/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ParcelAddLabelRequest(string SiteCode, string PrincipalCode, string OrderNumber, int ParcelNo, double Kilograms, double Length, double Breadth, double Height, double InsuredValue, string SPNumber, string ParcelReference, int NoOfParcels) {
            object[] results = this.Invoke("ParcelAddLabelRequest", new object[] {
                        SiteCode,
                        PrincipalCode,
                        OrderNumber,
                        ParcelNo,
                        Kilograms,
                        Length,
                        Breadth,
                        Height,
                        InsuredValue,
                        SPNumber,
                        ParcelReference,
                        NoOfParcels});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelAddLabelRequestAsync(string SiteCode, string PrincipalCode, string OrderNumber, int ParcelNo, double Kilograms, double Length, double Breadth, double Height, double InsuredValue, string SPNumber, string ParcelReference, int NoOfParcels) {
            this.ParcelAddLabelRequestAsync(SiteCode, PrincipalCode, OrderNumber, ParcelNo, Kilograms, Length, Breadth, Height, InsuredValue, SPNumber, ParcelReference, NoOfParcels, null);
        }
        
        /// <remarks/>
        public void ParcelAddLabelRequestAsync(string SiteCode, string PrincipalCode, string OrderNumber, int ParcelNo, double Kilograms, double Length, double Breadth, double Height, double InsuredValue, string SPNumber, string ParcelReference, int NoOfParcels, object userState) {
            if ((this.ParcelAddLabelRequestOperationCompleted == null)) {
                this.ParcelAddLabelRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelAddLabelRequestOperationCompleted);
            }
            this.InvokeAsync("ParcelAddLabelRequest", new object[] {
                        SiteCode,
                        PrincipalCode,
                        OrderNumber,
                        ParcelNo,
                        Kilograms,
                        Length,
                        Breadth,
                        Height,
                        InsuredValue,
                        SPNumber,
                        ParcelReference,
                        NoOfParcels}, this.ParcelAddLabelRequestOperationCompleted, userState);
        }
        
        private void OnParcelAddLabelRequestOperationCompleted(object arg) {
            if ((this.ParcelAddLabelRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelAddLabelRequestCompleted(this, new ParcelAddLabelRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.ramgroup.co.za/")]
    public partial class Result {
        
        private bool successField;
        
        private string reasonTextField;
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string ReasonText {
            get {
                return this.reasonTextField;
            }
            set {
                this.reasonTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.ramgroup.co.za/")]
    public partial class OCOLine {
        
        private int lineNumberField;
        
        private string prodCodeField;
        
        private int quantityPickedField;
        
        private string serialNumberField;
        
        private double unitCostField;
        
        private double vatField;
        
        private double discountField;
        
        /// <remarks/>
        public int LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ProdCode {
            get {
                return this.prodCodeField;
            }
            set {
                this.prodCodeField = value;
            }
        }
        
        /// <remarks/>
        public int QuantityPicked {
            get {
                return this.quantityPickedField;
            }
            set {
                this.quantityPickedField = value;
            }
        }
        
        /// <remarks/>
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        public double UnitCost {
            get {
                return this.unitCostField;
            }
            set {
                this.unitCostField = value;
            }
        }
        
        /// <remarks/>
        public double Vat {
            get {
                return this.vatField;
            }
            set {
                this.vatField = value;
            }
        }
        
        /// <remarks/>
        public double Discount {
            get {
                return this.discountField;
            }
            set {
                this.discountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.ramgroup.co.za/")]
    public partial class ORDLine {
        
        private int lineNumberField;
        
        private string lineTypeField;
        
        private string productCodeField;
        
        private string lineTextField;
        
        private int quantityField;
        
        private double unitCostField;
        
        private double vATField;
        
        private double unitDiscountAmountField;
        
        /// <remarks/>
        public int LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
        
        /// <remarks/>
        public string LineType {
            get {
                return this.lineTypeField;
            }
            set {
                this.lineTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ProductCode {
            get {
                return this.productCodeField;
            }
            set {
                this.productCodeField = value;
            }
        }
        
        /// <remarks/>
        public string LineText {
            get {
                return this.lineTextField;
            }
            set {
                this.lineTextField = value;
            }
        }
        
        /// <remarks/>
        public int Quantity {
            get {
                return this.quantityField;
            }
            set {
                this.quantityField = value;
            }
        }
        
        /// <remarks/>
        public double UnitCost {
            get {
                return this.unitCostField;
            }
            set {
                this.unitCostField = value;
            }
        }
        
        /// <remarks/>
        public double VAT {
            get {
                return this.vATField;
            }
            set {
                this.vATField = value;
            }
        }
        
        /// <remarks/>
        public double UnitDiscountAmount {
            get {
                return this.unitDiscountAmountField;
            }
            set {
                this.unitDiscountAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ARRAddCompletedEventHandler(object sender, ARRAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ARRAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ARRAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CLCAddCompletedEventHandler(object sender, CLCAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CLCAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CLCAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SAAAddCompletedEventHandler(object sender, SAAAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SAAAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SAAAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ORDAddCompletedEventHandler(object sender, ORDAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ORDAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ORDAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void OCOAddCompletedEventHandler(object sender, OCOAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OCOAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OCOAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void OSTAddCompletedEventHandler(object sender, OSTAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OSTAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OSTAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SLAAddCompletedEventHandler(object sender, SLAAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SLAAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SLAAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void IGDAddCompletedEventHandler(object sender, IGDAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IGDAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IGDAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ParcelAddCompletedEventHandler(object sender, ParcelAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ParcelLabelCompletedEventHandler(object sender, ParcelLabelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ParcelAddLabelRequestCompletedEventHandler(object sender, ParcelAddLabelRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelAddLabelRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelAddLabelRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591