@{
    ViewBag.Title = "Inbound Add New";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<h4 id="pageHeader" class="page-header">Receiving - New Order</h4>

<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div>
                    @Html.ActionLink("Back to Receiving Main", "InboundList", "Inbound")
                </div>
            </div>
            <div class="panel-body">

                <div class="row">
                    <div class="col-lg-12">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <div id="myModelDiv"></div>

                                <div class="row">
                                    <div class="col-lg-12">
                                        <form role="form" id="frmAddInbound" onsubmit="return false;">
                                            <div class="row">
                                                <div class="col-xs-8 col-sm-6">
                                                    <div>
                                                        <div class="form-group">
                                                            <label>Purchase Order Reference</label>
                                                            <input class="form-control" placeholder="Purchase Order Reference" id="txtPORef" name="txtPORef">
                                                            @*<p class="help-block">Example block-level help text here.</p>*@
                                                        </div>
                                                    </div>
                                                    <div>
                                                        <div class="form-group">
                                                            <label>Supplier Name</label>
                                                            <input class="form-control" placeholder="Supplier Name" id="txtSupplierName" name="txtSupplierName">
                                                            @*<p class="help-block">Example block-level help text here.</p>*@
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-xs-4 col-sm-6">
                                                    <div>
                                                        <div class="form-group">

                                                            <label id="labelName">Purchase Order Date</label>
                                                            <div class='input-group date' id='datetimepickerPODate'>
                                                                <input type='text' id="txtPODate" placeholder="Purchase Order Date" class="form-control" />
                                                                <span class="input-group-addon">
                                                                    <span class="glyphicon glyphicon-calendar"></span>
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div>
                                                        <div class="form-group">
                                                            <label id="labelName">Expected Delivery Date</label>
                                                            @* <input class="form-control" placeholder="Expected Delivery Date" id="txtExpectedDeliveryDate" name="txtExpectedDeliveryDate">*@
                                                            <div class='input-group date' id='datetimepickerExpectedDeliveryDate'>
                                                                <input type='text' id="txtExpectedDate" placeholder="Expected Delivery Date" class="form-control" />
                                                                <span class="input-group-addon">
                                                                    <span class="glyphicon glyphicon-calendar"></span>
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>

                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- /.panel -->
                    </div>
                    <!-- /.col-lg-12 -->
                </div>

                <div class="col-lg-12">
                    <div class="form-group">

                        <div class="row">
                            <div class="col-lg-12">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        Products
                                    </div>
                                    <!-- /.panel-heading -->
                                    <div class="panel-body">
                                        <div id="pnlTable" class="panel-body">
                                            <table id="tblInboundLineItems" class="table table-striped table-bordered table-hover">
                                                <thead>
                                                    <tr>
                                                        <th>No</th>
                                                        <th>Product ID</th>
                                                        <th>Product Code</th>
                                                        <th>EAN Code</th>
                                                        <th>Short Description</th>
                                                        <th>Long Description</th>
                                                        <th>Unit Cost</th>
                                                        <th>Qty</th>
                                                        <th></th>
                                                        <th></th>
                                                    </tr>
                                                </thead>
                                                <tbody></tbody>
                                                <tfoot>
                                                    <tr id="trLineEntry">
                                                        <td></td>
                                                        <td><input id="txtProductStagingID" type="text" class="cellStagingProdID" disabled /></td>
                                                        <td><input id="txtProdCode" type="text" class="cellProdCode autocomplete" /></td>
                                                        <td><input id="txtEANCode" type="text" class="cellEANCode autocomplete" /></td>
                                                        <td><input id="txtShortDesc" type="text" class="cellShortDesc autocomplete" /></td>
                                                        <td><input id="txtLongDesc" type="text" class="cellLongDesc autocomplete" /></td>
                                                        <td><input id="txtUnitCost" type="text" class="cellUnitCost numeric" /></td>
                                                        <td><input id="txtQty" type="text" class="cellQty numeric" /></td>
                                                        <td><input id="btnAddLineItem" type="button" value="Add" style="display:;" /></td>
                                                        <td><input id="btnReset" type="button" value="Reset" /></td>
                                                    </tr>
                                                </tfoot>
                                            </table>
                                            <!-- /#tblInboundLineItems -->
                                        </div>

                                    </div>
                                    <!-- /.panel-body -->
                                </div>
                                <!-- /.panel -->
                            </div>
                            <!-- /.col-lg-12 -->
                        </div>
                    </div>
                </div>

                <!-- /.row -->
                <div class="form-group" style="float:right;">
                    <button type="button" class="btn btn-primary" id="btnClear">Clear Line Items</button>
                    <button type="button" class="btn btn-primary" id="btnSaveAll">Save New Inbound</button>
                </div>
            </div>
        </div>
        <!-- /.panel -->
    </div>
    <!-- /.col-lg-12 -->
</div>

<div id="loading" class="spinner">
</div>

<!-- /.col-lg-12 -->
@*</div>*@
<!-- /.row -->

<style>
    input {
        border: 1px solid #ccc;
        width: 100%;
        height: 100%;
        padding: 0 4px 0 4px;
    }

        input:focus {
            border: 1px solid #808080;
            outline: none;
        }

    .numeric {
    }

    .autocomplete {
    }

    .cellInboundMasterLineItemID {
        /*width: 50px;*/
        width: 51px;
        /*display:none;*/
    }

    .cellLineNumber {
        width: 50px;
    }

    .cellStagingProdID {
        width: 50px;
    }

    .cellProdCode {
        width: 200px;
    }

    .cellEANCode {
    }

    .cellShortDesc {
        width: 200px;
    }

    .cellLongDesc {
        width: 300px;
    }

    .cellUnitCost {
        width: 50px;
    }

    .cellSalesPrice {
        width: 50px;
    }

    .cellQty {
        width: 50px;
    }

    .lineItem {
    }

    .deleteRow {
    }
</style>


<!-- DataTables CSS -->
<link href="~/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.css" rel="stylesheet">
<!-- DataTables Responsive CSS -->
<link href="~/bower_components/datatables-responsive/css/dataTables.responsive.css" rel="stylesheet">
<link href="~/Content/Spinner.css" rel="stylesheet" />
<!-- jQuery UI CSS -->
<link href="~/Content/jquery-ui.min.css" rel="stylesheet" />
<link href="~/Content/jquery.ui.autocomplete.css" rel="stylesheet" />
@*<script src="~/Scripts/jquery-1.10.2.min.js"></script>*@
<script src="~/Scripts/jquery-2.1.4.min.js"></script>
<!-- DataTables JavaScript -->
<script src="~/bower_components/DataTables/media/js/jquery.dataTables.min.js"></script>
<script src="~/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.min.js"></script>

<link href="~/bootstrap/css/bootstrap.css" rel="stylesheet" />
<script src="~/Scripts/jquery.tmpl.min.js"></script>
<script src="~/Scripts/jquery-ui.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>

<script src="~/Scripts/MaskedInput/jquery.maskedinput.min.js"></script>
<script src="~/Scripts/BestUpper/jquery.bestupper.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker-1.4.0/js/bootstrap-datepicker.js"></script>
<link href="~/Scripts/bootstrap-datepicker-1.4.0/css/bootstrap-datepicker.css" rel="stylesheet">

<script src="~/Scripts/Numeric/jquery.numeric.min.js"></script>
<script src="~/Scripts/jquery.HotKeys/jquery.hotkeys.js"></script>


<script>

    var oReportTable = null;
    var AddedProductList = [];
    var TotalUnitCost = 0;
    var TotalQty = 0;
    var tableArray = [];

    $(document).ready(function () {

        var $loading = $('#loading');
        $(document).ajaxStart(function () {
            $loading.show();
        }).ajaxStop(function () {
            $loading.hide();
        });

        AddedProductList = [];
        EditableGridPageDefaults();
        EditableGridConfig();
        $("input.form-control").bestupper(); 

        ConfigureInboundMasterSaveValidation();  

        //GetLineItems();
        //init the date picker
        $('#datetimepickerExpectedDeliveryDate').datepicker({
            format: "yyyy/mm/dd",
            autoclose: true
        });

        //init the date picker
        $('#datetimepickerPODate').datepicker({
            format: "yyyy/mm/dd",
            autoclose: true
        });

        ConfigureInboundMasterSaveValidation();
        WireAdditionalActions(); 

    });

    //configures the inbound masterlineitem validation
    function ConfigureInboundMasterSaveValidation() {
        //  alert("in ConfigureInboundMastersaveValidation ");

        thisValidatedForm = $("#frmAddInbound").validate({
            onsubmit: true,
            rules: {
                txtPORef: {
                    required: true

                },
                txtSupplierName: {
                    required: true
                },
                txtPODate: {
                    required: true
                },
                txtExpectedDate: {
                    required: true
                }


            },
            messages: {
                txtPORef: {
                    required: "Please enter a valid Purchase Order Reference."

                },
                txtSupplierName: {
                    required: "Please enter a valid Supplier Name."
                },
                txtPODate: {
                    required: "Please enter a valid Date."
                },
                txtExpectedDate: {
                    required: "Please enter a valid Date."
                }

            }
        });
        //  alert("after ConfigureInboundMasterSaveValidation ");
    }


    //determines the validity of the inbound master data
    function IsInboundMasterSaveValid() {

        var isFormValid = $('#frmAddInbound').valid();
        return isFormValid;
    }

    function WireAdditionalActions() {
        //init the date picker
        $('#datetimepickerExpectedDeliveryDate').datepicker({
            format: "yyyy/mm/dd",
            autoclose: true
        });

        //init the date picker
        $('#datetimepickerPODate').datepicker({
            format: "yyyy/mm/dd",
            autoclose: true
        });

        $('#btnSaveAll').click(function () {

            if (IsInboundMasterSaveValid()) {

                var Entries = parseInt($('#tblInboundLineItems tbody').children('tr').length);

                if (Entries > 0) {
                    $("#btnSaveAll").attr("disabled", "disabled");
                    var bool = SubmitOrder();
                    if (bool == true) {
                        SubmitOrder();
                    }
                }
                else {
                    swal("Please Add Products to Order", "", "error");
                }
            }

        });

        $("#btnClear").click(function () {
            ClearLineItem();
        });

    }

    function checkInputQuantity() {

        var LineItemQty = parseInt($('#txtQty').val() || 0);
        var parameters = JSON.stringify({
            ProductCode: $('#txtProdCode').val(),
            Quantity: LineItemQty
        });

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("CheckStockQuantity", "Outbound")',
            data: parameters,
            dataType: "json",
            success: function (response) {
                var result = response.Result;
                if (result == 'OK') {
                    AddLineItem();
                }
                else {
                    $('#txtQty').val("");
                    $('#txtQty').focus();
                    swal({
                        title: "Error",
                        text: result,
                        type: "error",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#D42E12"
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });

    }

    function SubmitOrder() {

        var j = 0;
        $('#tblInboundLineItems tr').each(function (i, row) {

            if (i != 0) {
                var $row1 = $(row), $ProductStagingID = $row1.find('input[id*="txtProductStagingID"]');
                var $row2 = $(row), $UnitCost = $row2.find('input[id*="txtUnitCost"]');
                var $row3 = $(row), $inputQuantity = $row3.find('input[id*="txtQty"]');

                if (($ProductStagingID.val() != '') && ($inputQuantity.val() > 0)) {
                    tableArray[j] = [$ProductStagingID.val() + '|' + $UnitCost.val() + '|' + $inputQuantity.val()];
                    j++;
                }
                else {
                    return false;
                }
            }
        });

        SaveNewInbound();
        SaveLineItems();

    }

    function CheckAndAddProductID(id) {

        if ($.inArray('', AddedProductList) != 1) {

        }
    }

    function ClearLineItem() {

        var session = 'WMSSession.TempInboundOrder';

        var parameters = JSON.stringify({
            viewSession: session
        });

        $.ajax({
            type: "POST",
            url: '@Url.Action("ClearLineItem", "Inbound")',
            data: parameters,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                $("#btnSaveAll").removeAttr("disabled", "disabled");
                $('#trLineEntry').find('input:text').val('');
                $('#trSRTotals').find('input:text').val('');
                
                var templateContainer = $("#tblInboundLineItems tbody").empty();
                var json = { 'Records': result.Data };

                $("#tmplInboundLineItems").tmpl(json).appendTo(templateContainer);

                AddedProductList = [];
                // Reapply plugins/bind controls
                EditableGridConfig();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

    function GetLineItems() {
        $.ajax({
            type: "POST",
            url: '@Url.Action("EditableGrid_GetLineItems", "Inbound")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                // Clear all inputs in line entry
                $('#trLineEntry').find('input:text').val('');

                var templateContainer = $("#tblInboundLineItems tbody").empty();
                var json = { 'Records': result.Data };

                $("#tmplInboundLineItems").tmpl(json).appendTo(templateContainer);

                // Reapply plugins/bind controls
                EditableGridConfig();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }


    function EditableGridPageDefaults() {

        $('#btnAddLineItem').click(function () {
            if (IsLineItemAddValid()) {
                if ($.inArray($('#txtProductStagingID').val(), AddedProductList) != -1) {

                    swal("Products has already been added");
                    $('#trLineEntry').find('input:text').val('');
                }
                else {
                    AddedProductList.push($('#txtProductStagingID').val());
                    //checkInputQuantity();
                    AddLineItem();

                }

            }
        });

        $('#btnReset').click(function () {
            $('#trLineEntry').find('input:text').val('');
            $('#txtProdCode').focus();
        });

        $('#tblInboundLineItems').on('keydown', '#txtQty', function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 9) {
                e.preventDefault();

                //checkInputQuantity();
                AddLineItem();

            }
        });

        // Binding keys
        $(document).bind('keydown', 'ctrl+a', function assets() {

            SaveLineItems();

            return false;
        });
        $('#txtProdCode').bind('keydown', 'ctrl+a', function assets() {

            SaveLineItems();

            return false;
        });
    }

    function EditableGridConfig() {

        BindAutocomplete();


        $(".numeric").numeric({ decimal: false, negative: false }, function () { swal("Positive integers only"); this.value = ""; this.focus(); });

        $(".currency").numeric({ decimal: true, decimalPlaces: 2, negative: false }, function () { swal("Positive currency values only"); this.value = "0.00"; this.focus(); });

        $('.deleteRow').click(DeleteRow);

        //$('.lineItem .cellUnitCost').blur(UpdateRow);

        //$('.lineItem .cellQty').blur(checkUpdateInputQuantity);
        $('.lineItem .cellQty').blur(UpdateRow);

        $('#txtProdCode').focus();

        //Do a refresh of the line items

        $("#btnSaveAll").removeAttr("disabled", "disabled");

    }

    /* Add **********************************************************************************/
    function AddLineItem() {

        var lineItem = new Object();

        lineItem.LineNumber = (parseInt($('#tblInboundLineItems tbody').children('tr').length) + 1);
        lineItem.ProductStagingID = $('#txtProductStagingID').val();
        lineItem.ProdCode = $('#txtProdCode').val();
        lineItem.EANCode = $('#txtEANCode').val();
        lineItem.ShortDesc = $('#txtShortDesc').val();
        lineItem.LongDesc = $('#txtLongDesc').val();
        var UnitCost = $.trim($('#txtUnitCost').val());
        var FloatUnitCost = parseFloat(UnitCost).toFixed(0);

        lineItem.UnitCost = FloatUnitCost;

        lineItem.Qty = $('#txtQty').val();


        var session = 'WMSSession.TempInboundOrder';

        var parameters = JSON.stringify({
            lineItem: lineItem,
            viewSession: session
        });

        $.ajax({
            type: "POST",
            url: '@Url.Action("EditableGrid_AddLineItemAddNew", "Inbound")',
            data: parameters,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {

                if (result.Result.search(/error/i) == -1) {

                    // Clear all inputs in line entry
                    $('#trLineEntry').find('input:text').val('');

                    var templateContainer = $("#tblInboundLineItems tbody").empty();
                    var json = { 'Records': result.Data };

                    $("#tmplInboundLineItems").tmpl(json).appendTo(templateContainer);

                    // Reapply plugins/bind controls
                    EditableGridConfig();
                    //reload the line items
                }
                else {
                    swal(result.Result);
                    // Clear all inputs in line entry
                    $('#trLineEntry').find('input:text').val('');

                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

    function IsLineItemAddValid() {
        var isAddValid = true;

        if ($('#txtProdCode').val() == '') {
            $('#txtProdCode').focus();

            swal('Please select a product');

            isAddValid = false;
        }

        return isAddValid;
    }


    /* Delete **********************************************************************************/
    function DeleteRow() {


        var tr = $(this).closest('tr');

        var lineNumber = tr.find(".cellLineNumber").html();
        var stagingProdID = tr.find(".cellStagingProdID").val();
        var unitCost = tr.find(".cellUnitCost").val();
        var quantity = tr.find(".cellQty").val();

        swal({
            title: "Are you sure you want to delete No." + lineNumber + " ?",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "OK",
            closeOnConfirm: false
        }, function () {
            $(this).parents('tr').first().remove();

            AddedProductList = $.grep(AddedProductList, function (value) {
                return value != stagingProdID;
            });

            RemoveLineItem(lineNumber, unitCost, quantity);
            swal("Deleted!", "No. " + lineNumber + " deleted.", "success");
        });

    }

    function RemoveLineItem(lineNumber, unitCost, quantity) {

        var session = 'WMSSession.TempInboundOrder';

        var parameters = JSON.stringify({
            lineNumber: lineNumber,
            viewSession: session
        });

        $.ajax({
            type: "POST",
            url: '@Url.Action("EditableGrid_RemoveLineItemAddNew", "Inbound")',
            data: parameters,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {

                $('#trLineEntry').find('input:text').val('');

                var templateContainer = $("#tblInboundLineItems tbody").empty();
                var json = { 'Records': result.Data };

                $("#tmplInboundLineItems").tmpl(json).appendTo(templateContainer);

                // Reapply plugins/bind controls
                EditableGridConfig();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

    /* Update **********************************************************************************/

    function UpdateRow() {

        var tr = $(this).closest('tr');

        $(this).parents('tr').first().remove();

        var lineItem = new Object();

        lineItem.LineNumber = tr.find(".cellLineNumber").html();
        lineItem.ProductStagingID = tr.find(".cellStagingProdID").val();
        lineItem.ProductCode = tr.find(".cellProdCode").val();
        lineItem.EANCode = tr.find(".cellEANCode").val();
        lineItem.ShortDesc = tr.find(".cellShortDesc").val();
        lineItem.LongDesc = tr.find(".cellLongDesc").val();
        lineItem.UnitCost = tr.find(".cellUnitCost").val();
        lineItem.Qty = tr.find(".cellQty").val();

        UpdateLineItem(lineItem);
    }

    function checkUpdateInputQuantity() {

        var tr = $(this).closest('tr');

        // $(this).parents('tr').first().remove();

        var lineItem = new Object();

        lineItem.LineNumber = tr.find(".cellLineNumber").html();
        lineItem.ProductStagingID = tr.find(".cellStagingProdID").val();
        lineItem.ProductCode = tr.find(".cellProdCode").val();
        lineItem.EANCode = tr.find(".cellEANCode").val();
        lineItem.ShortDescription = tr.find(".cellShortDesc").val();
        lineItem.LongDescription = tr.find(".cellLongDesc").val();
        lineItem.UnitCost = tr.find(".cellUnitCost").val();
        lineItem.Quantity = tr.find(".cellQty").val();

        var pProductCode = tr.find(".cellProdCode").val();
        var pQuantity = tr.find(".cellQty").val();

        var parameters = JSON.stringify({
            ProductCode: pProductCode,
            Quantity: pQuantity
        });

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("CheckStockQuantity", "Outbound")',
            data: parameters,
            dataType: "json",
            success: function (response) {
                var result = response.Result;
                if (result == 'OK') {
                    UpdateLineItem(lineItem);
                    $('#txtQty').val(pQuantity);
                    tr.find(".cellQty").val(pQuantity);
                }
                else {
                    $('#txtQty').focus();
                    $('#txtQty').val('');
                    tr.find(".cellQty").val('');

                    swal({
                        title: "Error",
                        text: result,
                        type: "error",
                        confirmButtonText: "OK",
                        confirmButtonColor: "#D42E12"
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

    function UpdateLineItem(lineItem) {

        var session = 'WMSSession.TempInboundOrder';

        var parameters = JSON.stringify({
            lineItem: lineItem,
            viewSession: session
        });

        $.ajax({
            type: "POST",
            url: '@Url.Action("EditableGrid_UpdateLineItemAddNew", "Inbound")',
            data: parameters,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {

                $('#trLineEntry').find('input:text').val('');

                var templateContainer = $("#tblInboundLineItems tbody").empty();
                var json = { 'Records': result.Data };

                $("#tmplInboundLineItems").tmpl(json).appendTo(templateContainer);

                // Reapply plugins/bind controls
                EditableGridConfig();
                //reload the line items
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }


    /* Save **********************************************************************************/
    function SaveLineItems() {

        var session = 'WMSSession.TempInboundOrder';

        var parameters = JSON.stringify({
            viewSession: session
        });


        $.ajax({
            type: "POST",
            url: '@Url.Action("EditableGrid_SaveLineItemsAddNew", "Inbound")',
            data: parameters,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {

                var result = result.Result;

                if (result.search(/error/i) == -1) {
                    // Clear all inputs in line entry
                    $('#trLineEntry').find('input:text').val('');
                    $('#txtProdCode').focus();
                    $('#txtPORef').val('');
                    $('#txtSupplierName').val('');
                    $('#txtPODate').val('');
                    $('#txtExpectedDate').val('');
                    ClearLineItem();
                }
                else {
                    swal(result);
                    $("#btnSaveAll").removeAttr("disabled", "disabled");
                    $('#txtProdCode').focus();
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

    function SaveNewInbound() {

        var parameters = JSON.stringify({
            pPurchaseOrderRef: $('#txtPORef').val(),
            pSupplierName: $('#txtSupplierName').val(),
            pPurchaseOrderDate: $('#txtPODate').val(),
            pExpectedDeliveryDateTime: $('#txtExpectedDate').val(),
            pTable: tableArray.join(',')
        });

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("SaveNewOrderWithOrderLine", "Inbound")',
            data: parameters,
            dataType: "json",
            success: function (result) {

                var result = result.Result;

                if (result.search(/error/i) == -1) {
                }
                else {
                    $("#btnSaveAll").removeAttr("disabled", "disabled");
                    swal(result);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }


    /* jQuery UI Autocomplete **********************************************************************************/
    function BindAutocomplete() {
        $(".autocomplete").autocomplete({
            minLength: 3,
            source: function (request, response) {

                // 'this.element' - element the autocomplete widget is attached to
                var searchType = '';
                if ($(this.element).hasClass('cellProdCode')) {
                    searchType = 'ProdCode';
                }
                else if ($(this.element).hasClass('cellEANCode')) {
                    searchType = 'EANCode';
                }
                else if ($(this.element).hasClass('cellShortDesc')) {
                    searchType = 'ShortDesc';
                }
                else {
                    searchType = 'LongDesc';
                }

                $.ajax({
                    url: '@Url.Action("EditableGrid_ProductLookup", "Inbound")',
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ startsWith: request.term, searchType: searchType }),
                    success: function (data) {
                        response($.map(data, function (item) {

                            var label = '';
                            switch (searchType) {
                                case 'ProdCode':
                                    label = item.ProdCode;
                                    break;
                                case 'EANCode':
                                    label = item.EANCode;
                                    break;
                                case 'ShortDesc':
                                    label = item.ShortDesc; //(item.ShortDesc == null || item.ShortDesc == '') ? item.ProdCode : item.ShortDesc;
                                    break;
                                default:
                                    label = item.LongDesc;
                            }

                            return {
                                value: item.ProdCode,
                                label: label,
                                ProductStagingID: item.ProductStagingID,
                                ProdCode: item.ProdCode,
                                EANCode: item.EANCode,
                                ShortDesc: item.ShortDesc,
                                LongDesc: item.LongDesc,
                                UnitCost: item.UnitCost
                            }
                        }));
                    }
                });
            },
            focus: autocomplete_OnFocus,
            select: autocomplete_OnSelect
        });
    }
    function autocomplete_OnFocus(event, ui) {
        //$("#" + event.target.id).val(ui.item.value);

        var tr = $(this).closest('tr');

        tr.find(".cellStagingProdID").val(ui.item.ProductStagingID);
        tr.find(".cellProdCode").val(ui.item.ProdCode);
        tr.find(".cellEANCode").val(ui.item.EANCode);
        tr.find(".cellShortDesc").val(ui.item.ShortDesc);
        tr.find(".cellLongDesc").val(ui.item.LongDesc);
        tr.find(".cellUnitCost").val(ui.item.UnitCost);

        return false;
    }

    function autocomplete_OnSelect(event, ui) {
        $("#" + event.target.id).val(ui.item.value);

        var tr = $(this).closest('tr');

        tr.find(".cellStagingProdID").val(ui.item.ProductStagingID);
        tr.find(".cellProdCode").val(ui.item.ProdCode);
        tr.find(".cellEANCode").val(ui.item.EANCode);
        tr.find(".cellShortDesc").val(ui.item.ShortDesc);
        tr.find(".cellLongDesc").val(ui.item.LongDesc);
        tr.find(".cellUnitCost").val(ui.item.UnitCost);
        //tr.find(".cellSalesPrice").val(ui.item.SalesPrice);

        var keyCode = event.keyCode || event.which;
        if (keyCode == 9) {
            $(this).last("input:text").focus().select();
        }
        else {
            tr.find(".cellQty").focus();
            //tr.find(".cellUnitCost").focus();
        }

        return false;
    }

    function SaveOrder(submitFlag) {

        var parameters = JSON.stringify({
            //shipping customer
            pCustomerID: gloBillingCustomerID,
            pCustomerName: gloBillingCustomerName,
            pCustomerDetailID: gloBillingCustomerDetailID,
            //Invoice Customer
            pInvoiceCustomerID: gloCustomerID,
            pInvoiceCustomerName: gloCustomerName,
            pInvoiceCustomerDetailID: gloCustomerDetailID,

            pSubmitted: submitFlag,
            pTable: tableArray.join(',')

        });

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("SaveOrderSingleReceiver", "Outbound")',
            data: parameters,
            dataType: "json",
            success: function (response) {

                var result = response.Result;

                if (result == "SUCCESS") {

                    //Refresh Products
                }
                else {
                    swal(result);
                    swal("Unable to create a new Order.","","error");
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

    function ResetDataTable() {

        $('#trLineEntry').find('input:text').val('');
        $("#tblInboundLineItems tbody").empty();

    }

</script>

<script id="tmplInboundLineItems" type="text/x-jQuery-tmpl">
    {{each(i,record) Records}}
    <tr class="lineItem">

        <td class="cellLineNumber">${record.LineNumber}</td>
        <td><input id="txtProductStagingID${record.ProductStagingID}" type="text" class="cellStagingProdID" value="${record.ProductStagingID}" disabled /></td>
        <td><input id="txtProdCode${record.ProductStagingID}" type="text" class="cellProdCode autocomplete" value="${record.ProdCode}" /></td>
        <td><input id="txtEANCode${record.ProductStagingID}" type="text" class="cellEANCode autocomplete" value="${record.EANCode}" /></td>
        <td><input id="txtShortDesc${record.ProductStagingID}" type="text" class="cellShortDesc autocomplete" value="${record.ShortDesc}" /></td>
        <td><input id="txtLongDesc${record.ProductStagingID}" type="text" class="cellLongDesc autocomplete" value="${record.LongDesc}" /></td>
        <td><input id="txtUnitCost${record.UnitCost}" type="text" class="cellUnitCost numeric" value="${record.UnitCost}" /></td>
        <td><input id="txtQty${record.Qty}" type="text" class="cellQty numeric" value="${record.Qty}" /></td>
        <td><input type="button" value="Remove" class="deleteRow" /></td>
        <td></td>
    </tr>
    {{/each}}
</script>

@*https://www.simple-talk.com/dotnet/.net-framework/-client-side-markup-with-jquery-cloning-and-templates/*@
@*https://github.com/BorisMoore/jsrender*@
@*http://www.jsviews.com/#jsviews*@




