@{
    ViewBag.Title = "Warehouse Line Items";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
@model WMSCustomerPortal.Models.Common.InboundMasterItem
<h3 class="page-header">Warehouse Line Items</h3>


@* Main Panel *@
<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Results
                @*<div style="float:right;">
                        <button id="btnAddNewInboundMaster" type="button" class="btn btn-primary btn-xs" data-dismiss="modal">Add New Inbound</button>
                    </div>*@
                <div>
                    @Html.ActionLink("Back to Warehouse", "WarehouseList", "Warehouse")
                </div>
            </div>
            <!-- /.panel-heading -->
            <div class="panel-body">
                @* The text boxes for the inbound descriptions *@
                
                <form role="form" id="frmEditWarehouse" onsubmit="return false;">
                    @Html.HiddenFor(model => model.InboundMasterID, new { id = "hdnInboundMasterID" })
                    <div class="row">

                        <div class="col-xs-4 col-sm-6">
                            <div class="form-group">
                                <label>Purchase Order Reference</label>
                                <input class="form-control" placeholder="Purchase Order Reference" id="txtPORef" name="txtPORef" disabled>
                                @*<p class="help-block">Example block-level help text here.</p>*@
                            </div>

                            <div class="form-group">
                                <label>Supplier Name</label>
                                <input class="form-control" placeholder="Supplier Name" id="txtSupplierName" name="txtSupplierName" disabled>
                                @*<p class="help-block">Example block-level help text here.</p>*@
                            </div>
                        </div>
                    </div>
                    @* row *@

                    <div class="row">

                        <div class="col-xs-4 col-sm-6">

                            <div class="form-group">
                                <label id="labelName">Purchase Order Date</label>
                                <div class='input-group date' id='datetimepickerPODate'>
                                    <input type='text' id="txtPODate" placeholder="Purchase Order Date" class="form-control" disabled />
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>

                            </div>
                        </div>
                        <div class="col-xs-4 col-sm-6">

                            <div class="form-group">
                                <label id="labelName">Expected Delivery Date</label>
                                @* <input class="form-control" placeholder="Expected Delivery Date" id="txtExpectedDeliveryDate" name="txtExpectedDeliveryDate">*@
                                <div class='input-group date' id='datetimepickerExpectedDeliveryDate'>
                                    <input type='text' id="txtExpectedDate" placeholder="Expected Delivery Date" class="form-control" disabled />
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                            @*Form Group*@
                        </div>
                    </div>
                    @*Row*@


                </form>



            </div>
            <!-- /.panel-body -->

            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="divInboundMasterLineItemList"></div>


                    <div class="dataTable_wrapper" style="overflow:scroll;">
                        <table class="table table-striped table-bordered table-hover" id="dataTableWarehouseLineItemList">
                            <thead>
                                <tr>
                                    <th style="width:70px;">Inbound Master ID</th>
                                    <th style="width:70px;">Line Item ID</th>
                                    <th style="width:100px;">Expected Qty</th>
                                    <th style="width:100px;">Received In WH Qty</th>
                                    <th style="width:150px;">Product Code</th>
                                    <th style="width:250px;">Long Description</th>
                                    <th style="width:200px;">Short Description</th>
                                    <th style="width:50px;"></th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>



            </div>
            <!-- /.panel -->
            @Html.ActionLink("Back to Warehouse", "WarehouseList", "Warehouse")

        </div>
        <!-- /.panel -->
    </div>
    <!-- /.col-lg-12 -->
</div>
<!-- /.row -->

@* Modal IGD panel *@
<!-- Modal -->
<div class="modal fade bs-example-modal-lg" id="myModalIGDItems" tabindex="-1" role="dialog" aria-labelledby="myModalIGDLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true" data-whatever="mdo">&times;</button>
                <h4 class="modal-title" id="myModalIGDLabel">IGD Records</h4>
            </div>
            <div class="modal-body">

                <div class="panel panel-default">
                    <div class="panel-body">
                        @* We should indicate the amounts as recieved in the warehouse for each *@

                        @* Lets also put some hidden values in here  *@
                        @*<input id="hiddenIncomingMasterLineItemID" type="hidden" value="" />
                            <input id="hiddenIncomingMasterID" type="hidden" value="" />*@

                        <div class="row">
                            <div class="col-lg-12">
                                <form id="frmAddEditIGDRecords" role="form" onsubmit="return false;">
                                    <div class="form-group">
                                        @*<label style="display:none;">InboundLineItemID</label>
                                      <input class="form-control" placeholder="InboundLineItemID" id="txtInboundLineItemID" name="txtInboundLineItemID" disabled style="display:none;">*@
                                        <label>InboundLineItemID</label>
                                        <input class="form-control" placeholder="InboundLineItemID" id="txtInboundLineItemID" name="txtInboundLineItemID" disabled>

                                    </div>

                                    <div class="form-group">
                                        <label style="display:none;">ProductStagingID</label>
                                        <input style="display:none;" class="form-control" placeholder="ProductStagingID" id="txtProductStagingID" name="txtProductStagingID" disabled>

                                    </div>


                                    <div class="form-group">
                                        <label>Product Code</label>
                                        <input class="form-control" placeholder="Product Code" id="txtProdCode" name="txtProdCode" disabled>

                                    </div>

                                    <div class="form-group">
                                        <label>Product EAN Code</label>
                                        <input class="form-control" placeholder="Product EAN Code" id="txtEANCode" name="txtEANCode" disabled>

                                    </div>

                                    <div class="row">
                                        <div class="col-xs-8 col-sm-6">
                                            <div class="form-group">
                                                <label>Expected Quantity</label>
                                                <input class="form-control" placeholder="Expected Quantity" id="txtExpectedQuantity" name="txtExpectedQuantity" disabled>

                                            </div>
                                        </div>
                                        <div class="col-xs-8 col-sm-6">
                                            <div class="form-group">
                                                <label>Received in Warehouse Quantity</label>
                                                <input class="form-control" placeholder="Received in Warehouse Quantity" id="txtReceivedInWarehouseQuantity" name="txtReceivedInWarehouseQuantity" disabled>

                                            </div>
                                        </div>
                                    </div>

                                </form>
                            </div>
                        </div>
                    </div>
                </div>



                <div class="panel panel-default">
                    <div class="panel-body">
                        <div style="float:right;">
                            @*<button type="button" id="btnAddNewIGD" class="btn btn-primary" data-dismiss="modal">+ IGD</button>*@
                        </div>

                       @* <div id="divIGDItemList"></div>*@
                        <div class="dataTable_wrapper" style="overflow:scroll;">
                            <table id="tblIGDLineItems" class="table table-striped table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th>No</th>
                                        <th>IGDStagingID</th>
                                        <th>MoveRef</th>
                                        <th>SubmittedToWMS</th>
                                        <th>ReceivedQuantity</th>
                                        <th></th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                                <tfoot>
                                    <tr id="trLineEntry">
                                        <td></td>
                                        <td><input id="txtIGDStagingID" type="text" class="cellIGDStagingID" disabled style="display:none;" /></td>
                                        <td><input id="txtMoveRef" type="text" class="cellMoveRef" disabled /></td>
                                        <td><input id="chkSubmittedToWMS" type="text" class="cellSubmittedToWMS" disabled /></td>
                                        <td><input id="txtReceivedQuantity" type="text" class="cellReceivedQuantity" /></td>
                                        <td><input id="btnAddLineItem" type="button" value="Add" /></td>
                                        <td><input id="btnReset" type="button" value="Reset" /></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        </div>
                </div>
                <!-- /.panel -->

            </div>
            <div id="loading" class="spinner">
            </div>
            <div class="modal-footer">
                <div class="form-group" style="float:right;">
                 <button type="button" class="btn btn-primary" id="btnSubmitAllWMS">Submit To WMS</button>&nbsp;<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
                
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->
@* Modal IGD panel *@




<style>
    .modal-dialog {
        width: 1000px;
    }
</style>

<input id="hiddenAction" type="hidden" value="" />
<input id="hiddenPrincipalID" type="hidden" value="" />


<!-- DataTables CSS -->
<link href="~/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.css" rel="stylesheet">
<!-- DataTables Responsive CSS -->
<link href="~/bower_components/datatables-responsive/css/dataTables.responsive.css" rel="stylesheet">
<link href="~/Content/Spinner.css" rel="stylesheet" />
<link href="~/bootstrap/css/bootstrap.css" rel="stylesheet" />
<!-- jQuery UI CSS -->
<link href="~/Content/jquery-ui.min.css" rel="stylesheet" />
<link href="~/Content/jquery.ui.autocomplete.css" rel="stylesheet" />

@* This page requires 1.10.2 - but we will try 2.1.4 to see if all still works *@
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
@*<script src="~/Scripts/jquery-2.1.4.min.js"></script>*@


<!-- DataTables JavaScript -->
<script src="~/bower_components/DataTables/media/js/jquery.dataTables.min.js"></script>
<script src="~/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.min.js"></script>

<script src="~/Scripts/jquery.tmpl.min.js"></script>
<script src="~/Scripts/jquery-ui.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>

<script src="~/Scripts/MaskedInput/jquery.maskedinput.min.js"></script>
<script src="~/Scripts/BestUpper/jquery.bestupper.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker-1.4.0/js/bootstrap-datepicker.js"></script>
<link href="~/Scripts/bootstrap-datepicker-1.4.0/css/bootstrap-datepicker.css" rel="stylesheet">

<script src="~/Scripts/Numeric/jquery.numeric.min.js"></script>
<script src="~/Scripts/jquery.HotKeys/jquery.hotkeys.js"></script>



<script>

    //init the datatables
    var oWarehouseLineItemsTable = null;
    var oWarehouseIGDTable = null;
    var mdlID2 = null;

    var simple_checkbox = function (data, type, full, meta) {
        var is_checked = data == true ? "checked" : "";
        return '<input disabled type="checkbox" class="checkbox" ' +
            is_checked + ' />';
    }

    $(document).ready(function () {

        $("input.form-control").bestupper(); //forces all inputs to be capitals by using the bestupper plugin
        //alert("in document ready");
        //get the master id from the model
        var mdlID = $("#hdnInboundMasterID").val();
        mdlID2 = mdlID;
        var $loading = $('#loading');
        $(document).ajaxStart(function () {
            $loading.show();
        }).ajaxStop(function () {
            $loading.hide();
        });
        //alert("warehouse mdlID:" + mdlID);
        EditableGridConfig();
        EditableGridPageDefaults();
        PopulateInboundMasterRecord(mdlID); //populates the inbound master record
        PopulateXWarehouseLineItemsData(mdlID);
        //ConfigureIGDSaveValidation(); // ensures that the values are validated before saving

        WireAdditionalActions(); //onclick events etc
        OrderlineTableActions();

    });


    function OrderlineTableActions() {

        $('#dataTableWarehouseLineItemList tbody').on('click', 'button[viewigd]', function () {

            var row = oWarehouseLineItemsTable.row($(this).parents('tr'));

            if (row.data() != '' || row.data() != null) {

                $('#txtProductStagingID').val(row.data().ProductStagingID);
                $('#txtReceivedInWarehouseQuantity').val(row.data().ReceivedInWarehouseQuantity);
                $('#txtExpectedQuantity').val(row.data().ExpectedQuantity);
                $('#txtEANCode').val(row.data().EANCode);
                $('#txtProdCode').val(row.data().ProdCode);
                $('#txtInboundLineItemID').val(row.data().InboundMasterLineItemID);
                PopulateWarehouseIGDData(row.data().InboundMasterLineItemID);
            }

            $('#myModalIGDItems').modal({
                backdrop: 'static',
                keyboard: false
            });
        });

        $('#myModalIGDItems').on('hidden.bs.modal', function (e) {

        });
    }


    //Populate the inbound master details
    function PopulateInboundMasterRecord(pInboundMasterID) {


        //alert("In PopulateInboundMasterRecord: " + pInboundMasterID );
        if (pInboundMasterID == 0) {
            //set up as if for a new record -- clears any stuff lurking
            ClearAllTempLineItems();
            return;
        }

        // alert("inboundmasterid xxx" + pInboundMasterID);
        var parameters = JSON.stringify({
            inboundMasterID: pInboundMasterID
        });

        //do an ajax call to get the inbound master record
        var InboundMasterRecord;

        $.ajax({
            url: '@Url.Action("GetInboundMasterRecord", "Inbound")',
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: parameters,

            success: function (response) {
                CompleteFormData(response.InboundMaster);  //send the data to be populated
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });

    }

    function CompleteFormData(inboundMaster) {

        $('#hiddenInboundMasterID').val(inboundMaster.InboundMasterID);
        $('#txtPORef').val(inboundMaster.PORef);
        // inboundMaster.PODate = $("#datetimepickerPODate").data('datepicker').getFormattedDate('yyyy/mm/dd');
        // inboundMaster.ExpectedDeliveryDateTime = $("#datetimepickerExpectedDeliveryDate").data('datepicker').getFormattedDate('yyyy/mm/dd');
        $('#txtPODate').val(inboundMaster.PODate);
        $('#txtExpectedDate').val(inboundMaster.ExpectedDeliveryDateTime);

        $("#datetimepickerPODate").data('update', new Date(inboundMaster.PODate));
        $("#datetimepickerExpectedDeliveryDate").data('update', new Date(inboundMaster.ExpectedDeliveryDateTime));
        $('#txtSupplierName').val(inboundMaster.SupplierName);
    }




    //deletes a specific igd
    function DeleteIGD(dRow) {

        var igdStagingID = dRow.IGDStagingID;
        var parameters = JSON.stringify({
            igdStagingID: igdStagingID
        });

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("DeleteIGD", "Warehouse")',
            data: parameters,
            dataType: "json",
            success: function (response) {

                var result = response.Result;
                var saveResponse = response.SaveResponse;

                if (result.search(/error/i) == -1) {

                }
                else {
                    swal(response.SaveResponse.Details);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });

    }

    //submits a single line to wms
    function SubmitAllToWMS(inboundMasterLineItem) {
        //we will be getting a row item from the submit to wms button

        var inboundMasterLineItemID = inboundMasterLineItem;

        var parameters = JSON.stringify({
            inboundMasterLineItemID: inboundMasterLineItemID
        });

        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("SubmitAllIGDLineItemsToWMS", "Warehouse")',
            data: parameters,
            dataType: "json",
            success: function (response) {

                var result = response.Result;
                var saveResponse = response.SaveResponse;

                if (result.search(/error/i) == -1) {
                    swal("Submitted!", "Line Item ID: " + inboundMasterLineItem + ".", "success");
                    PopulateWarehouseIGDData(inboundMasterLineItemID)
                    //$("#myModalIGDItems").hide();
                }
                else {
                    swal(response.SaveResponse.Details);
                    PopulateWarehouseIGDData(inboundMasterLineItemID);

                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });

    }



    //refreshes the grids that contain the counts
    function RefreshReceivedInWarehouseCounts(inboundMasterID, inboundLineItemID) {

        PopulateWarehouseIGDData(inboundLineItemID);
        //PopulateWarehouseLineItemsData(inboundMasterID); //to reflect the latest changes in the igd's

        //also ... populate the dialog's data
    }

    //determiones if the IGD form is valid before saving
    function IsIGDSaveValid() {

        //alert("in IsIGDSaveValid");

        var isFormValid = $('#frmAddEditIGDRecordSingle').valid();
        // alert("form valid " + isFormValid);
        return isFormValid;
        //also do a count to see if there is more than the allowed number in the warehouse

    }

    //populates the inboundline items grid
    function PopulateXWarehouseLineItemsData(inboundMasterID) {

        if (oWarehouseLineItemsTable != null) {
            oWarehouseLineItemsTable.destroy();
        }
        oWarehouseLineItemsTable = $('#dataTableWarehouseLineItemList').DataTable({
            "order": [[0, "desc"]],
            "lengthMenu": [[20, 30, 40, -1], [20, 30, 40, "All"]],
            "bJQueryUI": true,
            "bServerSide": false,
            "sAjaxSource": '@Url.Action("GetWarehouseLineItemsList", "Warehouse")',
            "bProcessing": true,
            "fnServerData": function (sSource, parameters, fnCallback) {
                parameters.push({ "name": "masterId", "value": inboundMasterID });

                $.getJSON(sSource, parameters, function (json) {
                    if (json.Result.search(/error/i) == -1) {
                        fnCallback(json)
                    }
                    else {
                        swal(json.Result);
                    }
                })
                .done(function () { })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    swal(errorThrown, "error");
                    console.log("ERROR: " + errorThrown);
                    console.log("RESPONSE TEXT: " + jqXHR.responseText);
                })
                .always(function () { });
            },
            "columns": [
                            { "data": "InboundMasterID" },
                            { "data": "InboundMasterLineItemID" },
                            { "data": "ExpectedQuantity" },
                            { "data": "ReceivedInWarehouseQuantity" },
                            { "data": "ProdCode" },
                            { "data": "LongDesc" },
                            { "data": "ShortDesc" },
                            {
                                "targets": -1,
                                "data": null,
                                "defaultContent": "<button viewigd class='btn btn-primary btn-xs'>View IGDs</button>"
                            }
            ]
        });

    }

    function ResetDataTable() {

        var Browser = detectIE();
        if (Browser == false) {

            var data = new Object();
            data.sEcho = null;
            data.iTotalRecords = 0;
            data.iTotalDisplayRecords = 0;
            data.aaData = null;

            oWarehouseLineItemsTable.destroy();

            oWarehouseLineItemsTable = $('#dataTableWarehouseLineItemList').DataTable({
                "order": [[0, "desc"]],
                "lengthMenu": [[20, 30, 40, -1], [20, 30, 40, "All"]],
                "bJQueryUI": true,
                "bServerSide": false,
                "bProcessing": true,
                "data": data
            });
            PopulateXWarehouseLineItemsData(mdlID2);

        }
        else {
            //location.reload(true);
            window.location.reload();
        }
    }

    function detectIE() {
        var ua = window.navigator.userAgent;

        var msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
        }

        var trident = ua.indexOf('Trident/');
        if (trident > 0) {
            // IE 11 => return version number
            var rv = ua.indexOf('rv:');
            return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
        }

        var edge = ua.indexOf('Edge/');
        if (edge > 0) {
            // Edge (IE 12+) => return version number
            return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
        }

        return false;
    }

    //populkates the grid
    function PopulateWarehouseIGDData(inboundMasterLineItemID) {

        // alert("in PopulateWarehouseIGDData " + inboundMasterLineitemID);
        if (inboundMasterLineItemID == 0) {
            //set up as if for a new record
            //clear the grid


            return;
        }

        // alert("inboundmasterid xxx" + pInboundMasterID);
        var parameters = JSON.stringify({
            inboundMasterLineItemID: inboundMasterLineItemID
        });

        //do an ajax call to get the inbound master record

        $.ajax({
            url: '@Url.Action("EditableGrid_PrepopulateLineItems", "Warehouse")',
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: parameters,

            success: function (response) {

                //CompleteFormData(response.InboundMaster);  //send the data to be populated
                // Load the data into the grid

                //alert("success of EditableGrid_PrepopulateLineItems");
                GetLineItems();


            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }


    function WireAdditionalActions() {

        //wires up the submit this complete record to wms
        $('#btnSubmitAllWMS').on('click', function () {
            // alert("btnSubmitAllWMS clicked");
            //lets get the lineitem id that needs to be submitted

            swal({
                title: "Submit to WMS?",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "OK"
            }, function () {
                var lineItemIDForSubmission = $('#txtInboundLineItemID').val();
                SubmitAllToWMS(lineItemIDForSubmission);
            });


        });

        //wire up the onclick event for the igd record save for
    }

    function GetLineItems() {
        // alert("in GetLineItems");

        $.ajax({
            type: "POST",
            url: '@Url.Action("EditableGrid_GetLineItems", "Warehouse")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                // Clear all inputs in line entry
                $('#trLineEntry').find('input:text').val('');

                var templateContainer = $("#tblIGDLineItems tbody").empty();
                var json = { 'Records': result.Data };

                $("#tmplIGDLineItems").tmpl(json).appendTo(templateContainer);

                // Reapply plugins/bind controls
                EditableGridConfig();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }


    function EditableGridPageDefaults() {

        $('#btnAddLineItem').click(function () {
            if (IsLineItemAddValid()) {
                AddLineItem();
            }
        });

        $('#btnReset').click(function () {
            $('#trLineEntry').find('input:text').val('');
            $('#txtReceivedQuantity').focus();
        });


        $('#tblIGDLineItems').on('keydown', '#txtReceivedQuantity', function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 9) {
                e.preventDefault();

                AddLineItem();
            }
        });

        // Binding keys
        $(document).bind('keydown', 'ctrl+a', function assets() {

            SaveLineItems();

            return false;
        });
    }

    function EditableGridConfig() {

        //  BindAutocomplete();


        $(".numeric").numeric({ decimal: false, negative: false }, function () { alert("Positive integers only"); this.value = ""; this.focus(); });

        // $(".currency").numeric({ decimal: true, decimalPlaces: 2, negative: false }, function () { alert("Positive currency values only"); this.value = "0.00"; this.focus(); });

        $('.deleteRow').click(DeleteRow);

        $('.lineItem .cellReceivedQuantity').blur(UpdateRow);

        $('#txtProdCode').focus();
    }


    //clears any line items which may be lurking
    function ClearAllTempLineItems() {

        $.ajax({
            url: '@Url.Action("EditableGrid_ClearAllLineItems", "Warehouse")',
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                //CompleteFormData(response.InboundMaster);  //send the data to be populated
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });

    }

    function getJson() {
        return JSON.parse($.ajax({
            type: 'GET',
            url: '@Url.Action("GetNextIGDMoveRef", "Warehouse")',
            dataType: 'jsonp',
            global: false,
            async: false,
            success: function (data) {
                return data;
            }
        }).responseText);
    }

        /* Add **********************************************************************************/
        function AddLineItem() {

            var inboundExpectedQuantity = $("#txtExpectedQuantity").val();
            var lineItem = new Object();

            var MoveRef = getJson();

            lineItem.LineNumber = (parseInt($('#tblIGDLineItems tbody').children('tr').length) + 1);

            lineItem.MoveRef = MoveRef;
            lineItem.ReceivedQuantity = $("#txtReceivedQuantity").val();

            lineItem.IGDStagingID = 0;
            lineItem.InboundMasterLineItemID = $("#txtInboundLineItemID").val();

            //lineItem.ProductStagingID = $('#txtProductStagingID').val();
            lineItem.SubmittedToWMS = false;

            var parameters = JSON.stringify({
                lineItem: lineItem,
                inboundExpectedQuantity: inboundExpectedQuantity,
                ProductStagingID: $('#txtProductStagingID').val(),
                PODate: $('#txtPODate').val(),
                PORef: $('#txtPORef').val(),
                ExpectedDate: $('#txtExpectedDate').val()

            });

            $.ajax({
                type: "POST",
                url: '@Url.Action("EditableGrid_AddLineItem", "Warehouse")',
            data: parameters,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {

                if (result.Result.search(/error/i) == -1) {
                    // Clear all inputs in line entry
                    $('#trLineEntry').find('input:text').val('');

                    var templateContainer = $("#tblIGDLineItems tbody").empty();
                    var json = { 'Records': result.Data };

                    $("#tmplIGDLineItems").tmpl(json).appendTo(templateContainer);

                    EditableGridConfig();
                    var MoveRef = "";
                }
                else {
                    alert(result.Result);
                    // Clear all inputs in line entry
                    $('#trLineEntry').find('input:text').val('');
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

    function IsLineItemAddValid() {
        var isAddValid = true;

        if ($('#txtReceivedQuantity').val() == '') {
            $('#txtReceivedQuantity').focus();

            swal("Please enter a received quantity.");

            isAddValid = false;
        }

        if ($('#txtReceivedQuantity').val() == '0') {
            $('#txtReceivedQuantity').focus();

            swal('Please enter a received quantity.');

            isAddValid = false;
        }


        return isAddValid;
    }


    /* Delete **********************************************************************************/
    function DeleteRow() {

        var tr = $(this).closest('tr');

        $(this).parents('tr').first().remove();

        //var productstagingid = tr.find(".cellStagingProdID").val();
        var lineNumber = tr.find(".cellLineNumber").html();

        RemoveLineItem(lineNumber);
    }

    function RemoveLineItem(lineNumber) {

        var parameters = JSON.stringify({
            lineNumber: lineNumber
        });

        $.ajax({
            type: "POST",
            url: '@Url.Action("EditableGrid_RemoveLineItem", "Warehouse")',
            data: parameters,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {

                $('#trLineEntry').find('input:text').val('');

                var templateContainer = $("#tblIGDLineItems tbody").empty();
                var json = { 'Records': result.Data };

                $("#tmplIGDLineItems").tmpl(json).appendTo(templateContainer);

                // Reapply plugins/bind controls
                EditableGridConfig();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

    /* Update **********************************************************************************/
    function UpdateRow() {

        //alert("In update row");
        var tr = $(this).closest('tr');

        // $(this).parents('tr').first().remove();

        //var lineNumber = tr.find(".cellLineNumber").html();
        //var productstagingid = tr.find(".cellStagingProdID").val();
        //var quantity = tr.find(".cellQty").val();

        var lineItem = new Object();

        lineItem.IGDStagingID = tr.find(".cellIGDStagingID").val();
        lineItem.LineNumber = tr.find(".cellLineNumber").html();
        lineItem.MoveRef = tr.find(".cellMoveRef").val();
        lineItem.ReceivedQuantity = tr.find(".cellReceivedQuantity").val();
        lineItem.SubmittedToWMS = tr.find(".cellSubmittedToWMS").val();

        lineItem.InboundMasterLineItemID = $("#txtInboundLineItemID").val();
        UpdateLineItem(lineItem);
    }

    function UpdateLineItem(lineItem) {

        var parameters = JSON.stringify({
            lineItem: lineItem
        });

        $.ajax({
            type: "POST",
            url: '@Url.Action("EditableGrid_UpdateLineItem", "Warehouse")',
            data: parameters,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {

                $('#trLineEntry').find('input:text').val('');

                var templateContainer = $("#tblIGDLineItems tbody").empty();
                var json = { 'Records': result.Data };

                $("#tmplIGDLineItems").tmpl(json).appendTo(templateContainer);

                // Reapply plugins/bind controls
                EditableGridConfig();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

    /* Save **********************************************************************************/
    function SaveLineItems() {

        alert("in savelineitems");
        $.ajax({
            type: "POST",
            url: '@Url.Action("EditableGrid_SaveLineItems", "Warehouse")',
            //data: parameters,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {

                var result = result.Result;

                if (result.search(/error/i) == -1) {
                    // Clear all inputs in line entry
                    $('#trLineEntry').find('input:text').val('');
                    $('#txtReceivedQuantity').focus();

                    var templateContainer = $("#tblIGDLineItems tbody").empty();
                    var json = { 'Records': result.Data };

                    $("#tmplIGDLineItems").tmpl(json).appendTo(templateContainer);

                    // Reapply plugins/bind controls
                    EditableGridConfig();
                }
                else {
                    swal(result);

                    $('#txtReceivedQuantity').focus();
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                swal({
                    title: 'Error',
                    text: 'There was an error:' + errorThrown,
                    type: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#D42E12'
                });
            }
        });
    }

</script>

<script id="tmplIGDLineItems" type="text/x-jQuery-tmpl">
    {{each(i,record) Records}}
    <tr class="lineItem">
        <td class="cellLineNumber" disabled>${record.LineNumber}</td>
        <td><input id="txtIGDStagingID${record.IGDStagingID}" type="text" class="cellIGDStagingID" value="${record.IGDStagingID}" disabled /></td>
        <td><input id="txtMoveRef${record.MoveRef}" type="text" class="cellMoveRef" value="${record.MoveRef}" disabled /></td>
        <td><input id="chkSubmittedToWMS${record.SubmittedToWMS}" type="text" class="cellSubmittedToWMS" value="${record.SubmittedToWMS}" disabled /></td>
            <td><input id="txtReceivedQuantity${record.ReceivedQuantity}" type="text" class="cellReceivedQuantity numeric" value="${record.ReceivedQuantity}" /></td>
        
        <td></td>
        <td><input type="button" value="Remove" class="deleteRow" /></td>
      
    </tr>
    {{/each}}
</script>

@*<td></td>
<td><input id="txtIGDStagingID" type="text" class="cellIGDStagingID" disabled style="display:none;" /></td>
<td><input id="txtMoveRef" type="text" class="cellMoveRef" disabled /></td>
<td><input id="chkSubmittedToWMS" type="text" class="cellSubmittedToWMS" disabled /></td>
<td><input id="txtReceivedQuantity" type="text" class="cellReceivedQuantity" /></td>
<td><input id="btnAddLineItem" type="button" value="Add" /></td>
<td><input id="btnReset" type="button" value="Reset" /></td>*@